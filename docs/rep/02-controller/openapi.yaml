openapi: 3.0.2
info:
  title: Rik
  version: 0.1.0
paths:
  /api/v0/workloads.list:
    get:
      tags:
        - Workloads
      description: List all workloads
      parameters:
        - required: false
          schema:
            title: limit
            minimum: 1
            type: integer
          name: limit
          in: query
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workload"

  /api/v0/workloads.create:
    post:
      tags:
        - Workloads
      description: Create a new workload
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkloadDefinition"
      responses:
        "200":
          description: Successful Response
          content:
            text/plain:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3

  /api/v0/workloads.delete:
    post:
      tags:
        - Workloads
      description: Delete a workload
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 3

      responses:
        "200":
          description: Successful Response
  /api/v0/tenants.list:
    get:
      tags:
        - Tenants
      description: List all tenants
      parameters:
        - required: false
          schema:
            title: limit
            minimum: 1
            type: integer
          name: limit
          in: query
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tenant"

  /api/v0/tenants.create:
    post:
      tags:
        - Tenants
      description: Create a new tenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantDefinition"
      responses:
        "200":
          description: Successful Response
          content:
            text/plain:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3

  /api/v0/tenants.delete:
    post:
      tags:
        - Tenants
      description: Delete a tenant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "28dcac69-33ef-4b13-a42f-0d07c7acc1a6"
      responses:
        "200":
          description: Successful Response
  /api/v1/instances.list:
    get:
      tags:
        - Instances
      description: List all instances
      parameters:
        - required: false
          schema:
            title: limit
            minimum: 1
            type: integer
          name: limit
          in: query
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Instance"

  /api/v1/instances.create:
    post:
      tags:
        - Instances
      description: Create a new instance
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceDefinition"
      responses:
        "200":
          description: Successful Response

  /api/v0/instance.delete:
    post:
      tags:
        - Instances
      description: Delete an instance
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 3
      responses:
        "200":
          description: Successful Response

components:
  schemas:
    Tenant:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: <name>
        verb:
          type: string
          example: create
        resource:
          type: string
          example: workload
      required: [id, name, verb, resource]

    TenantDefinition:
      type: object
      properties:
        name:
          type: string
          example: <name>
        verb:
          type: string
          example: create
        resource:
          type: string
          example: workload
      required: [name, verb, resource]

    WorkloadDefinition:
      type: object
      properties:
        api_version:
          type: string
          example: "v1"
        kind:
          type: string
          enum:
            - Pod
            - Function
          example: Pod
        name:
          type: string
          example: workload-name
        spec:
          type: object
          properties:
            containers:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: <name>
                  image:
                    type: string
                    example: <image>
                  env:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: key1
                        value:
                          type: string
                          example: value1
                      required:
                        - name
                        - value
                  ports:
                    type: object
                    properties:
                      port:
                        type: number
                        example: 80
                      target_port:
                        type: number
                        example: 80
                      protocol:
                        type: string
                        example: TCP
                      type:
                        type: string
                        example: clusterIP|nodePort|loadBalancer
                    required: [port, targetPort, type]
                required: [name, image]
      required: [apiVersion, kind, name, spec]

    Workload:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: "/workload/pods/default/workload-name"
        value:
          $ref: "#/components/schemas/WorkloadDefinition"
      required: [id, name, value]

    InstanceDefinition:
      type: object
      properties:
        name:
          type: string
          example: "instance-name"
        workload_id:
          type: integer
          example: 3
        replicas:
          type: integer
          example: 3
      required: [workloadId]

    Instance:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: "/instance/pods/default/instance-name"
        value:
          type: integer
          example: "<status>"
      required: [id, name, workloadId, status]
